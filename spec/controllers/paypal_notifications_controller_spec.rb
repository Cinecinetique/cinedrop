require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PaypalNotificationsController do

  # This should return the minimal set of attributes required to create a valid
  # PaypalNotification. As you add validations to PaypalNotification, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "transaction_type" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PaypalNotificationsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all paypal_notifications as @paypal_notifications" do
      paypal_notification = PaypalNotification.create! valid_attributes
      get :index, {}, valid_session
      assigns(:paypal_notifications).should eq([paypal_notification])
    end
  end

  describe "GET show" do
    it "assigns the requested paypal_notification as @paypal_notification" do
      paypal_notification = PaypalNotification.create! valid_attributes
      get :show, {:id => paypal_notification.to_param}, valid_session
      assigns(:paypal_notification).should eq(paypal_notification)
    end
  end

  describe "GET new" do
    it "assigns a new paypal_notification as @paypal_notification" do
      get :new, {}, valid_session
      assigns(:paypal_notification).should be_a_new(PaypalNotification)
    end
  end

  describe "GET edit" do
    it "assigns the requested paypal_notification as @paypal_notification" do
      paypal_notification = PaypalNotification.create! valid_attributes
      get :edit, {:id => paypal_notification.to_param}, valid_session
      assigns(:paypal_notification).should eq(paypal_notification)
    end
  end

  describe "POST create" do

    before(:each) do
      @charlie = users(:one)
      @fiona = users(:two)
      @ipn_message = "mc_gross=19.95&protection_eligibility=Eligible&address_status=confirmed&payer_id=LPLWNMTBWMFAY&tax=0.00&address_street=1+Main+St&payment_date=20%3A12%3A59+Jan+13%2C+2009+PST&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=Test&mc_fee=0.88&address_country_code=US&address_name=Test+User&notify_version=2.6&custom=&payer_status=verified&address_country=United+States&address_city=San+Jose&quantity=1&verify_sign=AtkOfCXbDm2hu0ZELryHFjY-Vb7PAUvS6nMXgysbElEn9v-1XcmSoGtf&payer_email=gpmac_1231902590_per%40paypal.com&txn_id=61E67681CH3238416&payment_type=instant&last_name=User&address_state=CA&receiver_email=gpmac_1231902686_biz%40paypal.com&payment_fee=0.88&receiver_id=S8XGHLYDW9T3S&txn_type=express_checkout&item_name=&mc_currency=USD&item_number=&residence_country=US&test_ipn=1&handling_amount=0.00&transaction_subject=&payment_gross=19.95&shipping=0.00&subscr_id=dfsadfa77"
      @subscr_message = "mc_gross=19.95&protection_eligibility=Eligible&address_status=confirmed&payer_id=LPLWNMTBWMFAY&tax=0.00&address_street=1+Main+St&payment_date=20%3A12%3A59+Jan+13%2C+2009+PST&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=Test&mc_fee=0.88&address_country_code=US&address_name=Test+User&notify_version=2.6&custom=#{@charlie.id}&payer_status=verified&address_country=United+States&address_city=San+Jose&quantity=1&verify_sign=AtkOfCXbDm2hu0ZELryHFjY-Vb7PAUvS6nMXgysbElEn9v-1XcmSoGtf&payer_email=gpmac_1231902590_per%40paypal.com&txn_id=61E67681CH3238416&payment_type=instant&last_name=User&address_state=CA&receiver_email=gpmac_1231902686_biz%40paypal.com&payment_fee=0.88&receiver_id=S8XGHLYDW9T3S&txn_type=subscr_signup&subscr_date=20%3A12%3A59+Jan+13%2C+2009+PST&item_name=&mc_currency=USD&item_number=1&residence_country=US&test_ipn=1&handling_amount=0.00&transaction_subject=&payment_gross=19.95&shipping=0.00&subscr_id=dfsadfa77"
      @payment_message = "mc_gross=19.95&protection_eligibility=Eligible&address_status=confirmed&payer_id=LPLWNMTBWMFAY&tax=0.00&address_street=1+Main+St&payment_date=20%3A12%3A59+Jan+13%2C+2009+PST&payment_status=Completed&charset=windows-1252&address_zip=95131&first_name=Test&mc_fee=0.88&address_country_code=US&address_name=Test+User&notify_version=2.6&custom=#{@fiona.id}&payer_status=verified&address_country=United+States&address_city=San+Jose&quantity=1&verify_sign=AtkOfCXbDm2hu0ZELryHFjY-Vb7PAUvS6nMXgysbElEn9v-1XcmSoGtf&payer_email=gpmac_1231902590_per%40paypal.com&txn_id=61E67681CH3238416&payment_type=instant&last_name=User&address_state=CA&receiver_email=gpmac_1231902686_biz%40paypal.com&payment_fee=0.88&receiver_id=S8XGHLYDW9T3S&txn_type=recurring_payment&item_name=&mc_currency=USD&item_number=6&residence_country=US&test_ipn=1&handling_amount=0.00&transaction_subject=&payment_gross=19.95&shipping=0.00&subscr_id=dfsadfa77"
      @plan = 1
      @user = 3
    end
    
    describe "verify validity of IPN message from Paypal" do

      
      it "validate authenticity of valid ipn message" do
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "VERIFIED")
        post :create, @ipn_message
        response.body.should have_content("")
        response.should be_success
        assert_requested :post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate", :body => @ipn_message, :times => 1

        # should log valid transactions
        PaypalNotification.find_by_status("VERIFIED").should_not be_nil
        PaypalNotification.find_by_status("INVALID").should be_nil

      end
      
      it "mark invalid ipn message that fails paypal validation" do
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "INVALID")
        post :create, @ipn_message
        response.body.should have_content("")
        response.should be_success
        assert_requested :post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate", :body => @ipn_message, :times => 1

        # should log invalid transactions
        PaypalNotification.find_by_status("INVALID").should_not be_nil
        PaypalNotification.find_by_status("VERIFIED").should be_nil

      end

      it "return a bad data error page if response from paypal is neither VERIFIED or INVALID" do
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "XXXX")
        post :create, @ipn_message
        response.body.should have_content("")
        response.status.should eq(400)
        assert_requested :post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate", :body => @ipn_message, :times => 1

        PaypalNotification.find_by_status("INVALID").should be_nil
        PaypalNotification.find_by_status("VERIFIED").should be_nil
      end
    end

    describe "processes subscription signup message" do 

      it "creates a subcription with custom info from the message" do
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "VERIFIED")
        my_params = {}
        @subscr_message.split(/&/).each { |pv| (k,v) =  pv.split(/\=/); my_params[k.to_sym] = v }
        post :create, my_params, {"Content-Type" => "application/x-www-form-urlencoded"}
        response.body.should have_content("")
        response.should be_success

        subscription = Subscription.find_by_plan_id_and_user_id(@plan, @charlie.id)
        subscription.should_not be_nil
        subscription.start_date.should_not be_nil

      end

      it "is no-op if the subscription already exists" do
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "VERIFIED")
        my_params = {}
        @subscr_message.split(/&/).each { |pv| (k,v) =  pv.split(/\=/); my_params[k.to_sym] = v }
        my_params[:item_number] = 6
        my_params[:custom] = users(:user_three).id
        post :create, my_params, {"Content-Type" => "application/x-www-form-urlencoded"}
        response.body.should have_content("")
        response.should be_success
        Subscription.where("amount = 19.95 and status = 1 and user_id = #{users(:user_three).id} and plan_id = 6").count.should eq(1)
      end

      it "it links to existing instalments if it finds any"
    end

    describe "processes payment of instalment" do
      it "creates an instalment record for a subscription when a recurring payment is completed" do
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "VERIFIED")
        my_params = {}
        @payment_message.split(/&/).each { |pv| (k,v) =  pv.split(/\=/); my_params[k.to_sym] = v }
        post :create, my_params, {"Content-Type" => "application/x-www-form-urlencoded"}
        response.body.should have_content("")
        response.should be_success
        Instalment.find_by_transaction_id_and_subscription_id("61E67681CH3238416", subscriptions(:two).id).should_not be_nil
      end

      it "does not create an instalment record when a notification is a duplicate" do 
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "VERIFIED")
        my_params = {}
        @payment_message.split(/&/).each { |pv| (k,v) =  pv.split(/\=/); my_params[k.to_sym] = v }

        post :create, my_params, {"Content-Type" => "application/x-www-form-urlencoded"}
        response.body.should have_content("")
        response.should be_success

        post :create, my_params, {"Content-Type" => "application/x-www-form-urlencoded"}
        response.body.should have_content("")
        response.should be_success

        Instalment.where("transaction_id = '61E67681CH3238416' and status = 0").count.should eq(1)
      end

      it "creates an orphan instalment if there is no corresponding subscription" do 
        stub_request(:post, "http://localhost:4578/cgi-bin/webscr?cmd=_notify-validate").to_return(:body => "VERIFIED")
        my_params = {}
        @payment_message.split(/&/).each { |pv| (k,v) =  pv.split(/\=/); my_params[k.to_sym] = v }
        my_params['item_number'] = 7
        post :create, my_params, {"Content-Type" => "application/x-www-form-urlencoded"}
        response.body.should have_content("")
        response.should be_success
        instalment = Instalment.find_by_transaction_id_and_status("61E67681CH3238416", 0)
        instalment.should_not be_nil
        instalment.subscription_id.should be_nil
      end

    end

  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested paypal_notification" do
        paypal_notification = PaypalNotification.create! valid_attributes
        # Assuming there are no other paypal_notifications in the database, this
        # specifies that the PaypalNotification created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        PaypalNotification.any_instance.should_receive(:update).with({ "transaction_type" => "MyString" })
        put :update, {:id => paypal_notification.to_param, :paypal_notification => { "transaction_type" => "MyString" }}, valid_session
      end

      it "assigns the requested paypal_notification as @paypal_notification" do
        paypal_notification = PaypalNotification.create! valid_attributes
        put :update, {:id => paypal_notification.to_param, :paypal_notification => valid_attributes}, valid_session
        assigns(:paypal_notification).should eq(paypal_notification)
      end

      it "redirects to the paypal_notification" do
        paypal_notification = PaypalNotification.create! valid_attributes
        put :update, {:id => paypal_notification.to_param, :paypal_notification => valid_attributes}, valid_session
        response.should redirect_to(paypal_notification)
      end
    end

    describe "with invalid params" do
      it "assigns the paypal_notification as @paypal_notification" do
        paypal_notification = PaypalNotification.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        PaypalNotification.any_instance.stub(:save).and_return(false)
        put :update, {:id => paypal_notification.to_param, :paypal_notification => { "transaction_type" => "invalid value" }}, valid_session
        assigns(:paypal_notification).should eq(paypal_notification)
      end

      it "re-renders the 'edit' template" do
        paypal_notification = PaypalNotification.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        PaypalNotification.any_instance.stub(:save).and_return(false)
        put :update, {:id => paypal_notification.to_param, :paypal_notification => { "transaction_type" => "invalid value" }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested paypal_notification" do
      paypal_notification = PaypalNotification.create! valid_attributes
      expect {
        delete :destroy, {:id => paypal_notification.to_param}, valid_session
      }.to change(PaypalNotification, :count).by(-1)
    end

    it "redirects to the paypal_notifications list" do
      paypal_notification = PaypalNotification.create! valid_attributes
      delete :destroy, {:id => paypal_notification.to_param}, valid_session
      response.should redirect_to(paypal_notifications_url)
    end
  end

end
